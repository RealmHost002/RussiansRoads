[gd_scene load_steps=23 format=2]

[ext_resource path="res://textures/old_grass.jpg" type="Texture" id=1]
[ext_resource path="res://textures/grass-texture-35.jpg" type="Texture" id=2]
[ext_resource path="res://noise.tres" type="Texture" id=3]
[ext_resource path="res://RigidBody.tscn" type="PackedScene" id=4]
[ext_resource path="res://textures/NormalMap.png" type="Texture" id=5]
[ext_resource path="res://textures/road_2.jpg" type="Texture" id=6]
[ext_resource path="res://sound/engine_sound.ogg" type="AudioStream" id=7]
[ext_resource path="res://textures/GroundForest003 (1)/GroundForest003/REGULAR/1K/GroundForest003_COL_VAR1_1K.jpg" type="Texture" id=8]
[ext_resource path="res://AudioStreamPlayer.gd" type="Script" id=9]
[ext_resource path="res://textures/gui/smoke.tscn" type="PackedScene" id=10]

[sub_resource type="PlaneMesh" id=1]
size = Vector2( 20, 20 )
subdivide_width = 20
subdivide_depth = 20

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode blend_mix,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform sampler2D texture_albedo2 : hint_albedo;
uniform sampler2D noise_mix;
uniform sampler2D texture_height;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform vec2 depth_flip;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float height_mdfy;
uniform float eps;
uniform float texelMaxHeight;
varying vec3 vex;

float rand(vec2 co){
	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 getNormal(vec2 uv) {
  
  float u = texture(texture_height, uv + vec2(0.0, -eps)).r * texelMaxHeight;
  float r = texture(texture_height, uv + vec2(eps, 0.0)).r * texelMaxHeight;
  float l = texture(texture_height, uv + vec2(-eps, 0.0)).r * texelMaxHeight;
  float d = texture(texture_height, uv + vec2(0.0, eps)).r * texelMaxHeight;
  
  vec3 n;
  n.z = u - d;
  n.x = l - r;
  n.y = 2.0;
  return normalize(n);
}


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
//	float some = float(int(TIME * 102.4)) / 102.4;
//	UV.y -= TIME / 5.0;
	if (1.0 == 1.0){
	float b = VERTEX.z / 20.0 / 57.17 * 0.0;
//	VERTEX.z *= 1.0 - (VERTEX.x + 10.0) / 20.0;
	VERTEX.xz *= mat2(vec2(cos(b), -sin(b)), vec2(sin(b), cos(b)));
	}
	VERTEX.y += texture(texture_height,UV).r * height_mdfy * (UV.x - 0.5) * (UV.x - 0.5) * 5.0;
//	VERTEX.z *= 1.0 + (VERTEX.x + 10.0) / 20.0;
	NORMAL = getNormal(UV);
	vex = VERTEX;
}




void fragment() {
	vec2 base_uv = UV * 1.0;
//	base_uv.y -= TIME / 5.0;
	vec2 noise_uv = UV;
//	noise_uv.y -= TIME/ 5.0;
//	vec4 flow_tex = texture(texture_normal,base_uv);
//	base_uv += flow_tex.rg * (sin(1.0) / 2.0 + 1.0);

//	vec4 heigh_tex = texture(texture_height,UV);

	float a = rand(ceil(base_uv * 20.0));
//	base_uv *= mat2(vec2(cos(a), -sin(a)), vec2(sin(a), cos(a)));
	vec4 noise_tex = texture(noise_mix, noise_uv);
//	float a = 0.0;
	vec4 albedo_tex = texture(texture_albedo,base_uv * 20.0 * mat2(vec2(cos(a), -sin(a)), vec2(sin(a), cos(a))));
//	vec4 albedo_tex = texture(texture_albedo,base_uv * 6.0);
	vec4 albedo_tex2 = texture(texture_albedo2,base_uv * 20.0 * mat2(vec2(cos(a), -sin(a)), vec2(sin(a), cos(a))));
//	albedo_tex.gb -= noise_tex.gb / 3.0;

//	vec4 mix_tex = albedo_tex * noise_tex.r / 1.0 + albedo_tex2 * (1.0 - noise_tex.r) / 1.0;
//	vec4 mix_tex = mix(albedo_tex2, albedo_tex, noise_tex.r);
	vec4 mix_tex = mix(albedo_tex2, albedo_tex, (1.0 - clamp(vex.y / 1.0, 0.0, 1.0)) * noise_tex.r);
	ALBEDO = albedo.rgb * mix_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;

}
"

[sub_resource type="OpenSimplexNoise" id=3]
octaves = 5
persistence = 1.0

[sub_resource type="NoiseTexture" id=4]
width = 1024
height = 1024
seamless = true
noise = SubResource( 3 )

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 2 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.0
shader_param/metallic = 0.207
shader_param/roughness = 1.0
shader_param/depth_flip = Vector2( 1, 1 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/height_mdfy = 3.0
shader_param/eps = 0.01
shader_param/texelMaxHeight = 11.472
shader_param/texture_albedo = ExtResource( 2 )
shader_param/texture_albedo2 = ExtResource( 1 )
shader_param/noise_mix = SubResource( 4 )
shader_param/texture_height = ExtResource( 3 )

[sub_resource type="Curve3D" id=6]
_data = {
"points": PoolVector3Array( -16.1719, -0.0376205, -13.2834, 16.1719, 0.0376205, 13.2834, 18.1419, 0, -30.0927, 16.7681, -1.23511, -21.4061, -16.7681, 1.23511, 21.4061, 1.56863, -1.55925, 104.878, 24.6357, 2.12824, 8.54834, -24.6357, -2.12824, -8.54834, -109.021, -2.49357, 196.967, -1.86916, 0.380775, 21.1778, 1.86916, -0.380775, -21.1778, -75.9838, 4.04332, 6.41175, -1.66563, 0.700692, 17.7138, 1.66563, -0.700692, -17.7138, -73.8948, 8.81899, -52.0351, -16.0141, 0, 7.7644, 16.0141, 0, -7.7644, -31.9313, 0, -95.3734, -7.76092, 0, -25.7775, 7.76092, 0, 25.7775, 16.7579, 0, -89.0648, 7.12388, 4.91191, -15.3078, -7.12388, -4.91191, 15.3078, -12.2004, -0.380112, -60.0875, -9.8735, -1.71226, 3.05666, 9.8735, 1.71226, -3.05666, -3.54299, 0, -38.6713, 0, 0, 0, 13.8636, 0, 10.0919, 18.1419, 0, -30.0927 ),
"tilts": PoolRealArray( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
}

[sub_resource type="Shader" id=7]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
//	UV = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xz * vec2(0.1);
//	COLOR.r = (UV.y - 0.5) * 2.0;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	
	ALBEDO = albedo.rgb * albedo_tex.rgb;
//	ALBEDO = COLOR.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
}
"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.13
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/normal_scale = 0.49
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 6 )
shader_param/texture_normal = ExtResource( 5 )

[sub_resource type="Shader" id=9]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xz * vec2(0.1);
//	UV =UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 8 )

[sub_resource type="PlaneMesh" id=11]
size = Vector2( 100, 100 )

[sub_resource type="PrismMesh" id=12]
size = Vector3( 2, 8, 2 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 139.415 )
mesh = SubResource( 1 )
material/0 = SubResource( 5 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( -0.530422, -0.701343, 0.476203, 0, 0.561737, 0.827316, -0.847733, 0.438827, -0.297958, 0, 12.4093, 0 )
shadow_enabled = true

[node name="RigidBody" parent="." instance=ExtResource( 4 )]
transform = Transform( -0.766459, -0.0732695, 0.6381, -0.0588012, 0.997305, 0.0438854, -0.639596, -0.00388473, -0.768701, 5.29579, 5.83647, -29.0924 )

[node name="Position3D2" type="Position3D" parent="RigidBody"]
transform = Transform( -1, 0, -3.25841e-07, 0, 1, 0, 3.25841e-07, 0, -1, 0, 1.50796, -2.34321 )

[node name="Path" type="Path" parent="."]
curve = SubResource( 6 )

[node name="CSGPolygon" type="CSGPolygon" parent="Path"]
use_collision = true
invert_faces = true
polygon = PoolVector2Array( -1, -1, -1, 1, 2, 1, 2, -1 )
mode = 2
path_node = NodePath("..")
path_interval = 3.0
path_rotation = 2
path_local = false
path_continuous_u = false
path_joined = true
material = SubResource( 8 )

[node name="Right_corner" type="CSGPolygon" parent="Path"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.054, 0, -0.003 )
use_collision = true
invert_faces = true
polygon = PoolVector2Array( 2, -1, 2, 1, 5, 2, 5, -1 )
mode = 2
path_node = NodePath("..")
path_interval = 3.0
path_rotation = 2
path_local = false
path_continuous_u = false
path_joined = true
material = SubResource( 10 )

[node name="Right_corner2" type="CSGPolygon" parent="Path"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.054, 0, -0.003 )
use_collision = true
invert_faces = true
polygon = PoolVector2Array( 5, -1, 5, 2, 20, 3, 20, -1 )
mode = 2
path_node = NodePath("..")
path_interval = 3.0
path_rotation = 2
path_local = false
path_continuous_u = false
path_joined = true
material = SubResource( 10 )

[node name="Left_corbner" type="CSGPolygon" parent="Path"]
use_collision = true
invert_faces = true
polygon = PoolVector2Array( -1, -1, -1, 1, -4, 2, -4, -1 )
mode = 2
path_node = NodePath("..")
path_interval = 3.0
path_rotation = 2
path_local = false
path_continuous_u = false
path_joined = true
material = SubResource( 10 )

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.207455, 0 )
visible = false
mesh = SubResource( 11 )
material/0 = null

[node name="trees" type="Spatial" parent="."]
visible = false

[node name="MeshInstance" type="MeshInstance" parent="trees"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 15.4723, 5.35695, -4.01834 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance2" type="MeshInstance" parent="trees"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 18.7262, 5.35695, -10.4438 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance3" type="MeshInstance" parent="trees"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 23.2969, 4.33024, 1.7414 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance4" type="MeshInstance" parent="trees"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 26.5509, 4.33024, -4.68403 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance5" type="MeshInstance" parent="trees"]
transform = Transform( 0.0482742, 0, 0.998834, 0, 1, 0, -0.998834, 0, 0.0482742, 17.0301, 4.40427, 16.036 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance6" type="MeshInstance" parent="trees"]
transform = Transform( 0.0482742, 0, 0.998834, 0, 1, 0, -0.998834, 0, 0.0482742, 10.7692, 4.40427, 12.4757 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance7" type="MeshInstance" parent="trees"]
transform = Transform( 0.0482742, 0, 0.998834, 0, 1, 0, -0.998834, 0, 0.0482742, 23.1608, 3.37757, 8.49853 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance8" type="MeshInstance" parent="trees"]
transform = Transform( 0.0482742, 0, 0.998834, 0, 1, 0, -0.998834, 0, 0.0482742, 16.9, 3.37757, 4.93818 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance9" type="MeshInstance" parent="trees"]
transform = Transform( -0.0775196, 0, 0.996991, 0, 1, 0, -0.996991, 0, -0.0775196, -8.81284, 5.35695, 21.2315 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance10" type="MeshInstance" parent="trees"]
transform = Transform( -0.0775196, 0, 0.996991, 0, 1, 0, -0.996991, 0, -0.0775196, -15.4712, 5.35695, 18.4854 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance11" type="MeshInstance" parent="trees"]
transform = Transform( -0.0775196, 0, 0.996991, 0, 1, 0, -0.996991, 0, -0.0775196, -3.677, 4.33024, 12.9838 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance12" type="MeshInstance" parent="trees"]
transform = Transform( -0.0775196, 0, 0.996991, 0, 1, 0, -0.996991, 0, -0.0775196, -10.3353, 4.33024, 10.2378 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance13" type="MeshInstance" parent="trees"]
transform = Transform( -0.999571, 0, -0.0293002, 0, 1, 0, 0.0293002, 0, -0.999571, 11.0604, 4.40427, 18.1237 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance14" type="MeshInstance" parent="trees"]
transform = Transform( -0.999571, 0, -0.0293002, 0, 1, 0, 0.0293002, 0, -0.999571, 7.99613, 4.40427, 24.6417 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance15" type="MeshInstance" parent="trees"]
transform = Transform( -0.999571, 0, -0.0293002, 0, 1, 0, 0.0293002, 0, -0.999571, 3.07034, 3.37757, 12.5957 )
mesh = SubResource( 12 )
material/0 = null

[node name="MeshInstance16" type="MeshInstance" parent="trees"]
transform = Transform( -0.999571, 0, -0.0293002, 0, 1, 0, 0.0293002, 0, -0.999571, 0.00605392, 3.37757, 19.1137 )
mesh = SubResource( 12 )
material/0 = null

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 7 )
volume_db = 2.0
script = ExtResource( 9 )

[node name="Gui" parent="." instance=ExtResource( 10 )]
